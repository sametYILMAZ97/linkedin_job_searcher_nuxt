name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  # Code Quality & Testing
  test:
    name: 🧪 Test & Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🔍 Lint code
      run: npm run lint

    - name: 🔧 Type check
      run: npm run type-check

    - name: 🧪 Run tests
      run: npm test

    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage/lcov.info
        fail_ci_if_error: false

  # Security Scanning
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🔍 Run security audit
      run: npm audit --audit-level moderate

    - name: 🛡️ Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # Build Test
  build:
    name: 🏗️ Build Test
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🏗️ Build application
      run: npm run build

    - name: 📏 Check bundle size
      run: |
        echo "Checking bundle size..."
        du -sh .output/

    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: .output/
        retention-days: 7

  # E2E Testing (optional)
  e2e:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🏗️ Build application
      run: npm run build

    - name: 🎭 Install Playwright
      run: npx playwright install --with-deps

    - name: 🎬 Run E2E tests
      run: npm run test:e2e
      if: false # Disabled until E2E tests are implemented

    - name: 📤 Upload E2E test results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: e2e-test-results
        path: test-results/
        retention-days: 7

  # Performance Testing
  lighthouse:
    name: 🚦 Lighthouse Audit
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🏗️ Build application
      run: npm run build

    - name: 🚀 Start server
      run: |
        npm run preview &
        sleep 10

    - name: 🚦 Run Lighthouse
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          http://localhost:3000
        configPath: './.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

  # Deployment (only on main branch)
  deploy:
    name: 🚀 Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'

    - name: 💬 Comment deployment URL
      uses: actions/github-script@v7
      if: github.event_name == 'push'
      with:
        script: |
          github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
            body: '🚀 Deployed to production! Check it out at: https://your-app.vercel.app'
          })

  # Dependency Updates
  dependency-review:
    name: 📦 Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: moderate
